@page "/"

@using System.IO
@using PlexSanitizer.Models
@using PlexSanitizer.Services

@inject IFolderSanitizerService FolderSanitizerService
@inject IRenameService RenameService
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h5" Class="mb-4">Plex Sanitizer</MudText>

    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-4">Select Source and Mode</MudText>
                
                <!-- Mode Selection -->
                <MudToggleGroup T="string" @bind-Value="@SelectedMode" Color="Color.Primary" Class="mb-4">
                    <MudToggleItem Value="@("folders")" Text="Folders Only" />
                    <MudToggleItem Value="@("files")" Text="Files and Folders" />
                </MudToggleGroup>

                <MudAlert Severity="Severity.Info" Class="mb-4">
                    <MudText Typo="Typo.body2">
                        <strong>@(SelectedMode == "folders" ? "Folder Mode:" : "File Mode:")</strong><br />
                        @if (SelectedMode == "folders")
                        {
                            <text>• Renames folders using sanitization rules<br />
                            • Good for cleaning up downloaded content folder names</text>
                        }
                        else
                        {
                            <text>• Renames both files and folders for Plex compatibility<br />
                            • Parses movie/TV show information from filenames<br />
                            • Generates Plex-standard naming conventions</text>
                        }
                        <br /><br />
                        <strong>Supported path formats:</strong><br />
                        • Local paths: <code>C:\Users\Username\Documents</code><br />
                        • Full network paths: <code>\\server\share\folder</code><br />
                        <br />
                        <strong>Note:</strong> Mapped drives (Z:, Y:, etc.) are not supported. Please use the full network path instead.
                    </MudText>
                </MudAlert>
                
                <MudTextField @bind-Value="SourceFolder" Immediate
                             Label="Folder Path" 
                             Placeholder="Paste or type the folder path here (e.g., C:\Folder or \\server\share\folder)"
                             Variant="Variant.Outlined" 
                             Adornment="Adornment.Start" 
                             AdornmentIcon="@Icons.Material.Filled.FolderOpen" 
                             FullWidth="true"
                             Class="mud-input-large-text"
                             Style="font-size: 1.2rem;"
                             Lines="1"
                             HelperText="Tip: You can copy a folder path from Windows Explorer's address bar and paste it here" />

                <MudDivider Class="my-4" />

                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ScanItems" 
                        Disabled="@(string.IsNullOrEmpty(SourceFolder))" Class="mb-4">
                    @(SelectedMode == "folders" ? "Scan Folders" : "Scan Files & Folders")
                </MudButton>

                @if (IsLoading)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
                }

                @if (SelectedMode == "folders" && Folders != null && Folders.Any())
                {
                    <!-- Folder Sanitization Rules -->
                    <MudExpansionPanels>
                        <MudExpansionPanel Text="Sanitization Rules" IsInitiallyExpanded="true">
                            <MudList T=bool Dense="true">
                                @for (int i = 0; i < SanitizationRules.Count; i++)
                                {
                                    var rule = SanitizationRules[i];
                                    var index = i;
                                    <MudListItem>
                                        <MudCheckBox T="bool" Value="rule.IsActive" Color="Color.Primary" 
                                                    ValueChanged="@(isChecked => ToggleRule(index, isChecked))" />
                                        <MudText Typo="Typo.body1" Class="ml-2">@rule.Name</MudText>
                                        <MudText Typo="Typo.caption" Class="ml-4">@rule.Description</MudText>
                                    </MudListItem>
                                }
                            </MudList>
                        </MudExpansionPanel>
                    </MudExpansionPanels>

                    <MudDivider Class="my-4" />

                    <!-- Folder Preview Table -->
                    <MudPaper Class="pa-4 mb-4">
                        <MudText Typo="Typo.h6" Class="mb-2">Preview Changes</MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="PreviewChanges" 
                                  Class="mb-4">
                            Refresh Preview
                        </MudButton>
                        
                        <MudTable Items="@Folders" Dense="true" Hover="true" Bordered="true" Striped="true" 
                                 Style="max-height: 600px; overflow-y: auto;">
                            <ColGroup>
                                <col style="width: 50px;" />
                                <col style="width: 45%;" />
                                <col style="width: 45%;" />
                                <col style="width: 80px;" />
                            </ColGroup>
                            <HeaderContent>
                                <MudTh>
                                    <MudCheckBox @bind-Value="@SelectAll" Color="Color.Primary" />
                                </MudTh>
                                <MudTh>Original Name</MudTh>
                                <MudTh>Sanitized Name</MudTh>
                                <MudTh>Change</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="">
                                    <MudCheckBox @bind-Value="@context.IsSelected" Color="Color.Primary" />
                                </MudTd>
                                <MudTd DataLabel="Original" Style="word-break: break-all; white-space: normal;">
                                    @context.Name
                                </MudTd>
                                <MudTd DataLabel="Sanitized" Style="word-break: break-all; white-space: normal;">
                                    @(string.IsNullOrEmpty(context.NewName) ? context.Name : context.NewName)
                                </MudTd>
                                <MudTd DataLabel="Change">
                                    @if (context.HasChanges)
                                    {
                                        <MudChip T=bool Color="Color.Success" Size="Size.Small">Yes</MudChip>
                                    }
                                    else
                                    {
                                        <MudChip T=bool Color="Color.Default" Size="Size.Small">No</MudChip>
                                    }
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>

                    <MudPaper Class="d-flex justify-end pa-4 mt-2" Elevation="0">
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ApplySanitization" 
                                 Disabled="@(!Folders.Any(f => f.IsSelected && f.HasChanges))">
                            Apply Changes
                        </MudButton>
                    </MudPaper>
                }
                else if (SelectedMode == "files" && Files != null && Files.Any())
                {
                    <!-- File Renaming Options -->
                    <MudExpansionPanels>
                        <MudExpansionPanel Text="File Renaming Options" IsInitiallyExpanded="true">
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudCheckBox @bind-Value="@RenameFiles" Color="Color.Primary" Label="Rename Files" />
                                    <MudText Typo="Typo.caption" Class="ml-6">Parse and rename files to Plex format</MudText>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudCheckBox @bind-Value="@OrganizeFolders" Color="Color.Primary" Label="Organize into Plex Structure" />
                                    <MudText Typo="Typo.caption" Class="ml-6">Create Movies/TV Shows folder structure</MudText>
                                </MudItem>
                                @if (OrganizeFolders)
                                {
                                    <MudItem xs="12">
                                        <MudTextField @bind-Value="TargetBasePath" 
                                                     Label="Target Base Path (for organization)" 
                                                     Placeholder="e.g., C:\Media or \\server\plex-media"
                                                     Variant="Variant.Outlined" 
                                                     FullWidth="true" />
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudExpansionPanel>
                    </MudExpansionPanels>

                    <MudDivider Class="my-4" />

                    <!-- File Preview Table -->
                    <MudPaper Class="pa-4 mb-4">
                        <MudText Typo="Typo.h6" Class="mb-2">Preview Changes</MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="PreviewFileChanges" 
                                  Class="mb-4">
                            Refresh Preview
                        </MudButton>
                        
                        <MudTable Items="@Files" Dense="true" Hover="true" Bordered="true" Striped="true" 
                                 Style="max-height: 600px; overflow-y: auto;">
                            <ColGroup>
                                <col style="width: 40px;" />
                                <col style="width: 100px;" />
                                <col style="width: 30%;" />
                                <col style="width: 30%;" />
                                <col style="width: 80px;" />
                                <col style="width: 60px;" />
                            </ColGroup>
                            <HeaderContent>
                                <MudTh>
                                    <MudCheckBox @bind-Value="@SelectAllFiles" Color="Color.Primary" />
                                </MudTh>
                                <MudTh>Type</MudTh>
                                <MudTh>Original Name</MudTh>
                                <MudTh>New Name</MudTh>
                                <MudTh>Change</MudTh>
                                <MudTh>Edit</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="">
                                    <MudCheckBox @bind-Value="@context.IsSelected" Color="Color.Primary" />
                                </MudTd>
                                <MudTd DataLabel="Type">
                                    @if (context.MediaType == MediaType.Movie)
                                    {
                                        <MudChip T=string Color="Color.Primary" Size="Size.Small">Movie</MudChip>
                                    }
                                    else if (context.MediaType == MediaType.TvShow)
                                    {
                                        <MudChip T=string Color="Color.Secondary" Size="Size.Small">TV Show</MudChip>
                                    }
                                    else
                                    {
                                        <MudChip T=string Color="Color.Default" Size="Size.Small">Unknown</MudChip>
                                    }
                                </MudTd>
                                <MudTd DataLabel="Original" Style="word-break: break-all; white-space: normal;">
                                    @context.Name
                                </MudTd>
                                <MudTd DataLabel="New" Style="word-break: break-all; white-space: normal;">
                                    @(string.IsNullOrEmpty(context.NewName) ? context.Name : context.NewName)
                                </MudTd>
                                <MudTd DataLabel="Change">
                                    @if (context.HasChanges)
                                    {
                                        <MudChip T=bool Color="Color.Success" Size="Size.Small">Yes</MudChip>
                                    }
                                    else
                                    {
                                        <MudChip T=bool Color="Color.Default" Size="Size.Small">No</MudChip>
                                    }
                                </MudTd>
                                <MudTd DataLabel="Edit">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                 Size="Size.Small" 
                                                 OnClick="@(() => EditFileMetadata(context))" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>

                    <MudPaper Class="d-flex justify-end pa-4 mt-2" Elevation="0">
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ApplyFileChanges" 
                                 Disabled="@(!Files.Any(f => f.IsSelected && (f.HasChanges || OrganizeFolders)))">
                            Apply Changes
                        </MudButton>
                    </MudPaper>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private string SourceFolder { get; set; } = string.Empty;
    private string SelectedMode { get; set; } = "folders";
    private string TargetBasePath { get; set; } = string.Empty;
    
    // Folder-related properties
    private List<FolderItem> Folders { get; set; } = new List<FolderItem>();
    private List<FolderSanitizationRule> SanitizationRules { get; set; } = new List<FolderSanitizationRule>();
    
    // File-related properties
    private List<FileItem> Files { get; set; } = new List<FileItem>();
    private bool RenameFiles { get; set; } = true;
    private bool OrganizeFolders { get; set; } = false;
    
    private bool IsLoading { get; set; } = false;
    private bool _selectAll = true;
    private bool _selectAllFiles = true;

    protected override void OnInitialized()
    {
        SanitizationRules = FolderSanitizerService.GetRules();
    }

    private bool SelectAll
    {
        get => _selectAll;
        set
        {
            if (_selectAll != value)
            {
                _selectAll = value;
                foreach (var folder in Folders)
                {
                    folder.IsSelected = value;
                }
            }
        }
    }

    private bool SelectAllFiles
    {
        get => _selectAllFiles;
        set
        {
            if (_selectAllFiles != value)
            {
                _selectAllFiles = value;
                foreach (var file in Files)
                {
                    file.IsSelected = value;
                }
            }
        }
    }

    private void ToggleRule(int index, bool isChecked)
    {
        FolderSanitizerService.ToggleRule(index, isChecked);
        // Recalculate the preview if needed
        if (Folders.Any())
        {
            PreviewChanges();
        }
    }
    
    private async Task ScanItems()
    {
        if (string.IsNullOrEmpty(SourceFolder))
        {
            Toast.Add("Please select a source folder", Severity.Warning);
            return;
        }

        try
        {
            IsLoading = true;
            
            if (SelectedMode == "folders")
            {
                await ScanFolders();
            }
            else
            {
                await ScanFiles();
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error scanning items: {ex.Message}");
            Toast.Add($"Error scanning: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task ScanFolders()
    {
        try
        {
            Folders = await FolderSanitizerService.GetFoldersAsync(SourceFolder);
            
            if (!Folders.Any())
            {
                Toast.Add("No folders found in the selected directory", Severity.Info);
            }
            else
            {
                bool pathExists = await FolderSanitizerService.PathExistsAsync(SourceFolder);
                
                if (!pathExists)
                {
                    Toast.Add($"Path '{SourceFolder}' not accessible. Using example data for demonstration.", Severity.Warning);
                }
                else 
                {
                    Toast.Add($"Found {Folders.Count} folders in {SourceFolder}", Severity.Success);
                }
                
                SelectAll = true;
                await PreviewChanges();
            }
        }
        catch (NotSupportedException ex)
        {
            Debug.WriteLine($"Mapped drive not supported: {ex.Message}");
            Toast.Add(ex.Message, Severity.Error);
            Toast.Add("Please use full network paths (e.g., \\\\server\\share) or local paths (e.g., C:\\folder) instead.", Severity.Info);
            SourceFolder = string.Empty;
        }
    }

    private async Task ScanFiles()
    {
        try
        {
            Files = (await RenameService.AnalyzeFilesAsync(SourceFolder)).ToList();
            
            if (!Files.Any())
            {
                Toast.Add("No media files found in the selected directory", Severity.Info);
            }
            else
            {
                Toast.Add($"Found {Files.Count} media files in {SourceFolder}", Severity.Success);
                SelectAllFiles = true;
                await PreviewFileChanges();
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error scanning files: {ex.Message}");
            Toast.Add($"Error scanning files: {ex.Message}", Severity.Error);
            Files = new List<FileItem>();
        }
    }

    private async Task PreviewChanges()
    {
        if (!Folders.Any())
        {
            return;
        }

        try
        {
            IsLoading = true;
            Folders = await FolderSanitizerService.PreviewSanitizationAsync(Folders);
            
            int changesCount = Folders.Count(f => f.HasChanges);
            if (changesCount > 0)
            {
                Toast.Add($"Preview: {changesCount} folders will be renamed", Severity.Info);
            }
            else
            {
                Toast.Add("No changes needed for these folders", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error previewing changes: {ex.Message}");
            Toast.Add("Error generating preview", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task PreviewFileChanges()
    {
        if (!Files.Any())
        {
            return;
        }

        try
        {
            IsLoading = true;
            
            foreach (var file in Files)
            {
                await RenameService.GenerateNewNameAsync(file);
            }
            
            int changesCount = Files.Count(f => f.HasChanges);
            if (changesCount > 0)
            {
                Toast.Add($"Preview: {changesCount} files will be renamed", Severity.Info);
            }
            else
            {
                Toast.Add("No changes needed for these files", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error previewing file changes: {ex.Message}");
            Toast.Add("Error generating file preview", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task ApplySanitization()
    {
        var foldersToRename = Folders.Where(f => f.IsSelected && f.HasChanges).ToList();
        
        if (!foldersToRename.Any())
        {
            Toast.Add("No folders selected for renaming", Severity.Warning);
            return;
        }

        string confirmationMessage = $"Are you sure you want to rename {foldersToRename.Count} folders? This cannot be undone.";

        var parameters = new DialogParameters();
        parameters.Add("ContentText", confirmationMessage);
        parameters.Add("ButtonText", "Rename");
        parameters.Add("Color", Color.Error);

        var dialog = await DialogService.ShowAsync<DialogConfirmation>("Confirm Renaming", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                IsLoading = true;
                bool success = await FolderSanitizerService.ApplySanitizationAsync(foldersToRename);

                if (success)
                {
                    Toast.Add("Folders renamed successfully", Severity.Success);
                    await ScanFolders();
                }
                else
                {
                    Toast.Add("Some folders could not be renamed. Check permissions or network connectivity.", Severity.Warning);
                    await ScanFolders();
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error applying sanitization: {ex.Message}");
                Toast.Add($"Error renaming folders: {ex.Message}", Severity.Error);
            }
            finally
            {
                IsLoading = false;
            }
        }
    }

    private async Task ApplyFileChanges()
    {
        var filesToProcess = Files.Where(f => f.IsSelected).ToList();
        
        if (!filesToProcess.Any())
        {
            Toast.Add("No files selected for processing", Severity.Warning);
            return;
        }

        string action = OrganizeFolders ? "organize and rename" : "rename";
        string confirmationMessage = $"Are you sure you want to {action} {filesToProcess.Count} files? This cannot be undone.";

        var parameters = new DialogParameters();
        parameters.Add("ContentText", confirmationMessage);
        parameters.Add("ButtonText", OrganizeFolders ? "Organize" : "Rename");
        parameters.Add("Color", Color.Error);

        var dialog = await DialogService.ShowAsync<DialogConfirmation>("Confirm File Processing", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                IsLoading = true;
                bool success = false;

                if (OrganizeFolders && !string.IsNullOrEmpty(TargetBasePath))
                {
                    success = await RenameService.OrganizeFoldersAsync(filesToProcess, TargetBasePath);
                }
                else if (RenameFiles)
                {
                    success = await RenameService.ApplyRenamingAsync(filesToProcess);
                }

                if (success)
                {
                    Toast.Add($"Files {action}d successfully", Severity.Success);
                    await ScanFiles();
                }
                else
                {
                    Toast.Add($"Some files could not be {action}d. Check permissions or network connectivity.", Severity.Warning);
                    await ScanFiles();
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error applying file changes: {ex.Message}");
                Toast.Add($"Error processing files: {ex.Message}", Severity.Error);
            }
            finally
            {
                IsLoading = false;
            }
        }
    }

    private async Task EditFileMetadata(FileItem fileItem)
    {
        var parameters = new DialogParameters();
        parameters.Add("FileInfo", fileItem);

        var dialog = await DialogService.ShowAsync<DialogEditFileName>("Edit File Metadata", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            StateHasChanged();
        }
    }
}